// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250420100007_NewMigration_Update")]
    partial class NewMigration_Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0)
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.BaseFullEntity", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseEntity");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(96);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(95);

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(99);

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(98);

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(97);

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Domain.Entities.StoreUserRole", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseEntity");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("StoreUserRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BaseRole", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Domain.Entities.BaseUser", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SignInTime")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApprovedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerAddress", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CustomerPaymentMethods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CustomerRank", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerRanks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ArrivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EstimatedArrivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserPromotionId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRank")
                        .HasColumnType("integer");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserPromotionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderReview", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderReviews", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentMethodHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId")
                        .IsUnique();

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductItem", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<decimal>("DiscountedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OriginalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductItems", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductPromotion", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ScheduledTask", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskPath")
                        .HasColumnType("text");

                    b.HasIndex("StoreUserId");

                    b.ToTable("ScheduledTasks", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StockHistory", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.ToTable("StockHistories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Store", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Infomation")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<int>("IsVerified")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserPromotion", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFullEntity");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPromotions", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AdministratorRole", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseRole");

                    b.ToTable("AdministratorUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("76ef21d6-b464-4f8b-a501-9fa9c4fc16a4"),
                            IsDeleted = false,
                            Description = "Super Admin Role with all permissions",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("8cf544d2-f751-4a31-b93d-df02ccc61552"),
                            IsDeleted = false,
                            Description = "Admin Role ",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.StoreRole", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseRole");

                    b.ToTable("StoreRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4718aa05-2a6a-4088-9652-0c5dab867a29"),
                            IsDeleted = false,
                            Description = "",
                            Name = "Manager",
                            NormalizedName = "Store Manager"
                        },
                        new
                        {
                            Id = new Guid("0f8babed-8653-4a4a-86a6-81c6316ee5d0"),
                            IsDeleted = false,
                            Description = "",
                            Name = "Service",
                            NormalizedName = "Service"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AdministratorUser", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseUser");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.ToTable("AdministratorUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab151a06-649c-42bb-b33a-2e5854adef10"),
                            IsDeleted = false,
                            Email = "admin@elderly.com",
                            FirstName = "Super",
                            IsVerified = true,
                            LastName = "Admin",
                            PasswordHash = "$2a$12$jtym2Cfrbf2eg/e5.WrZue/9VyjSVaYWpCNUbqFKWvi8yM/njtFy2:$2a$12$jtym2Cfrbf2eg/e5.WrZue",
                            Phone = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.CustomerUser", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseUser");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uuid");

                    b.ToTable("CustomerUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.StoreUser", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseUser");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductReport", b =>
                {
                    b.HasBaseType("Domain.Entities.Report");

                    b.ToTable("ProductReports", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserReport", b =>
                {
                    b.HasBaseType("Domain.Entities.Report");

                    b.ToTable("UserReports", (string)null);
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.StoreUserRole", b =>
                {
                    b.HasOne("Domain.Entities.StoreRole", "Role")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.StoreUser", "StoreUser")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.HasOne("Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("Domain.Entities.CartItem", b =>
                {
                    b.HasOne("Domain.Entities.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.HasOne("Domain.Entities.AdministratorUser", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasOne("Domain.Entities.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.CustomerRank", b =>
                {
                    b.HasOne("Domain.Entities.CustomerUser", "Customer")
                        .WithOne("Rank")
                        .HasForeignKey("Domain.Entities.CustomerRank", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserPromotion", "UserPromotion")
                        .WithMany()
                        .HasForeignKey("UserPromotionId");

                    b.Navigation("OrderStatus");

                    b.Navigation("UserPromotion");
                });

            modelBuilder.Entity("Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Domain.Entities.OrderReview", b =>
                {
                    b.HasOne("Domain.Entities.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasOne("Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentMethodHistories")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Entities.ProductItem", "ProductItem")
                        .WithOne("ProductImage")
                        .HasForeignKey("Domain.Entities.ProductImage", "ProductItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Product");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("Domain.Entities.ProductVariant", "Variant")
                        .WithMany("Items")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Domain.Entities.ProductPromotion", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Report", b =>
                {
                    b.HasOne("Domain.Entities.AdministratorUser", null)
                        .WithMany("Reports")
                        .HasForeignKey("AdministratorUserId");
                });

            modelBuilder.Entity("Domain.Entities.ScheduledTask", b =>
                {
                    b.HasOne("Domain.Entities.StoreUser", "StoreUser")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("Domain.Entities.StockHistory", b =>
                {
                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CustomerUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AdministratorUser", b =>
                {
                    b.HasOne("Domain.Entities.AdministratorRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.OwnsOne("Domain.Entities.OTPData", "OTP", b1 =>
                        {
                            b1.Property<Guid>("AdministratorUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean");

                            b1.HasKey("AdministratorUserId");

                            b1.ToTable("AdministratorUsers");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorUserId");
                        });

                    b.Navigation("OTP");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.CustomerUser", b =>
                {
                    b.OwnsOne("Domain.Entities.OTPData", "OTP", b1 =>
                        {
                            b1.Property<Guid>("CustomerUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean");

                            b1.HasKey("CustomerUserId");

                            b1.ToTable("CustomerUsers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerUserId");
                        });

                    b.Navigation("OTP");
                });

            modelBuilder.Entity("Domain.Entities.StoreUser", b =>
                {
                    b.HasOne("Domain.Entities.Store", null)
                        .WithMany("StoreUsers")
                        .HasForeignKey("StoreId");

                    b.OwnsOne("Domain.Entities.OTPData", "OTP", b1 =>
                        {
                            b1.Property<Guid>("StoreUserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean");

                            b1.HasKey("StoreUserId");

                            b1.ToTable("StoreUsers");

                            b1.WithOwner()
                                .HasForeignKey("StoreUserId");
                        });

                    b.Navigation("OTP");
                });

            modelBuilder.Entity("Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PaymentMethodHistories");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductPromotions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductImage")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("Domain.Entities.Store", b =>
                {
                    b.Navigation("StoreUsers");
                });

            modelBuilder.Entity("Domain.Entities.StoreRole", b =>
                {
                    b.Navigation("StoreUserRoles");
                });

            modelBuilder.Entity("Domain.Entities.AdministratorUser", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("Domain.Entities.CustomerUser", b =>
                {
                    b.Navigation("Rank")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.StoreUser", b =>
                {
                    b.Navigation("ScheduledTasks");

                    b.Navigation("StoreUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
