// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250731010353_AddProductImageRelation")]
    partial class AddProductImageRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Commons.Entities.BaseRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHardDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConsultantRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c09b112-baf9-4ec3-bc79-cce452219d61"),
                            Description = "Chuyên viên tư vấn là người tư vấn cho người cao tuổi và có quyền tư vấn cho người cao tuổi.",
                            RoleName = "Consultant"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.StoreUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHardDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("StoreUserRoles", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(96);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(95);

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHardDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(98);

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHardDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("OTPId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OTPId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Categories.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHardDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderShippingStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ShipSource")
                        .HasColumnType("text");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("text");

                    b.Property<string>("TrackingMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TrackingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrackingUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrderShippingStatus");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderPaymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PayedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("OrderPaymentStatus");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHardDelete")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId", "PromotionId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("AdministratorRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c2cb3f3-d9b1-4d5f-8a9c-1e6f689ee0f4"),
                            Description = "Siêu quản trị viên là người quản lý toàn bộ hệ thống và có quyền quản lý toàn bộ hệ thống.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("0e61cc83-d3c4-43b1-9334-8dd0c9d22833"),
                            Description = "Quản trị viên là người quản lý cửa hàng và có quyền quản lý cửa hàng.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("CustomerRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c09b112-baf9-4ec3-bc79-cce452219d60"),
                            Description = "Người giám hộ là người giám hộ cho người phụ thuộc và có quyền giám hộ cho người phụ thuộc.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        },
                        new
                        {
                            Id = new Guid("c66a403b-e1f9-47f3-9f6b-d8c3913b7a1b"),
                            Description = "Người phụ thuộc là người phụ thuộc cho người giám hộ và có quyền phụ thuộc cho người giám hộ.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "DependentUser",
                            NormalizedName = "DEPENDENTUSER"
                        },
                        new
                        {
                            Id = new Guid("c66a403b-e1f9-47f3-9f6b-d8c3913b7a1c"),
                            Description = "Người khách là người khách và có quyền khách.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("StoreRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cb3e42-0903-4c3f-8e9c-bfdc6f6a1a01"),
                            Description = "Chủ cửa hàng là người quản lý cửa hàng và có quyền quản lý cửa hàng.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "ShopOwner",
                            NormalizedName = "SHOPOWNER"
                        },
                        new
                        {
                            Id = new Guid("a2a02247-2a41-4a38-8804-4be8038fa78b"),
                            Description = "Hỗ trợ cửa hàng là người hỗ trợ cửa hàng và có quyền hỗ trợ cửa hàng.",
                            IsDeleted = false,
                            IsHardDelete = false,
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.Wallet", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("TotalReceived")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRefunded")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSpent")
                        .HasColumnType("integer");

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart.Cart", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<bool>("IsConsultantUserRecommend")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart.CartItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Categories.Category", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApprovedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Conversations", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.ConversationMember", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("ConversationId");

                    b.HasIndex("UserId");

                    b.ToTable("ConversationMembers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Message", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Consultation", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DependentUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("text");

                    b.Property<string>("VideoRecordingUrl")
                        .HasColumnType("text");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("DependentUserId");

                    b.ToTable("Consultations", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CustomerPaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerRanks", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OTPData", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VerificationToId")
                        .HasColumnType("uuid");

                    b.ToTable("OTPData");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ConfirmUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DependentUserID")
                        .HasColumnType("uuid");

                    b.Property<int>("EarnedPoints")
                        .HasColumnType("integer");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("GuardianId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderNote")
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecieveUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("UsedPoints")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserPromotionId")
                        .HasColumnType("uuid");

                    b.HasIndex("ConfirmUserId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DependentUserID");

                    b.HasIndex("GuardianId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("OrderedUserId");

                    b.HasIndex("RecieveUserId");

                    b.HasIndex("UserPromotionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderDetails", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderItemStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Payments.PaymentHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CustomerPaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerPaymentMethodId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("WalletId");

                    b.ToTable("PaymentHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Payments.PaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReview", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.Product", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("VideoPath")
                        .HasColumnType("text");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.ProductItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<decimal>("DiscountedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<decimal>("OriginalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductItems", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.SavedAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("BaseUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("BaseUserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stocks.Stock", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("DamagedQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("ReturnedQuantity")
                        .HasColumnType("integer");

                    b.Property<int>("SoldQuantity")
                        .HasColumnType("integer");

                    b.HasIndex("ProductItemId")
                        .IsUnique();

                    b.ToTable("Stocks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111161"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7776),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 25,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("11111111-1111-1111-1111-111111111141"),
                            Quantity = 25,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111162"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7778),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 15,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("11111111-1111-1111-1111-111111111142"),
                            Quantity = 15,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222242"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7780),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 50,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("22222222-2222-2222-2222-222222222230"),
                            Quantity = 50,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222243"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7782),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 75,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("22222222-2222-2222-2222-222222222231"),
                            Quantity = 75,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333353"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7784),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 20,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("33333333-3333-3333-3333-333333333341"),
                            Quantity = 20,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333354"),
                            CreationDate = new DateTime(2025, 7, 15, 13, 5, 19, 9, DateTimeKind.Utc).AddTicks(7786),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvailableQuantity = 8,
                            DamagedQuantity = 0,
                            ProductItemId = new Guid("33333333-3333-3333-3333-333333333342"),
                            Quantity = 8,
                            ReservedQuantity = 0,
                            ReturnedQuantity = 0,
                            SoldQuantity = 0
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stocks.StockHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StockAfterChange")
                        .HasColumnType("integer");

                    b.HasIndex("ProductItemId");

                    b.ToTable("StockHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.Store", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("GhnShopId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsGhnSynced")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid>("StoreAddressId")
                        .HasColumnType("uuid");

                    b.HasIndex("AdministratorUserId");

                    b.HasIndex("StoreAddressId")
                        .IsUnique();

                    b.ToTable("Stores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsHardDelete = false,
                            AvatarPath = "/images/stores/store.jpg",
                            Description = "Cửa hàng độc lập chuyên cung cấp thiết bị y tế và thuốc cho người cao tuổi",
                            GhnShopId = 197185,
                            IsGhnSynced = false,
                            Name = "Nhà thuốc Độc Lập",
                            Phone = "02812345678",
                            StoreAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("StoreAddresses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreationDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IsHardDelete = false,
                            DistrictId = 1451,
                            DistrictName = "Quận 9",
                            ProvinceId = 202,
                            ProvinceName = "Hồ Chí Minh",
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            StreetAddress = "123 Lê Văn Việt",
                            WardCode = "20901",
                            WardName = "Phường Hiệp Phú"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.AdministratorUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.ToTable("AdministratorUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpertiseArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StringeeAccessToken")
                        .HasColumnType("text");

                    b.HasIndex("RoleId");

                    b.ToTable("ConsultantUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("CustomerRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WalletId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("WalletId");

                    b.ToTable("CustomerUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid");

                    b.HasIndex("GuardianId");

                    b.ToTable("DependentUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.ToTable("GuardianUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductReports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.ToTable("UserReports", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.StoreUserRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Stores.StoreRole", "Role")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.OTPData", "OTP")
                        .WithMany()
                        .HasForeignKey("OTPId");

                    b.Navigation("OTP");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Categories.ProductCategory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Categories.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderShippingStatus", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Order", null)
                        .WithOne("ShippingStatus")
                        .HasForeignKey("SilverCart.Domain.Entities.OrderShippingStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderPaymentStatus", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "CustomerUser")
                        .WithMany()
                        .HasForeignKey("CustomerUserId");

                    b.HasOne("SilverCart.Domain.Entities.Order", null)
                        .WithOne("PaymentStatus")
                        .HasForeignKey("SilverCart.Domain.Entities.Orders.OrderPaymentStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.AdministratorRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Stores.StoreRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.Wallet", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.Wallet", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart.Cart", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Cart.Cart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId");

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart.CartItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Cart.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Cart.CartItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Stores.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Categories.Category", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.AdministratorUser", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Categories.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Categories.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ApprovedUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Chat.Conversation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.ConversationMember", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Chat.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Chat.ConversationMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "User")
                        .WithMany("ConversationMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Message", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Chat.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Chat.Message", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Consultation", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.ConsultantUser", "ConsultantUser")
                        .WithMany("Consultations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.DependentUser", "DependentUser")
                        .WithMany("Consultations")
                        .HasForeignKey("DependentUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Consultation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultantUser");

                    b.Navigation("DependentUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.SavedAddress", "SavedAddress")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SavedAddress");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerPaymentMethod", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Payments.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithOne("Rank")
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerRank", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerRank", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OTPData", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.OTPData", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", "ConfirmUser")
                        .WithMany()
                        .HasForeignKey("ConfirmUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "CustomerUser")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.DependentUser", "DependentUser")
                        .WithMany()
                        .HasForeignKey("DependentUserID");

                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.OrderStatus", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "OrderedUser")
                        .WithMany()
                        .HasForeignKey("OrderedUserId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "RecieveUser")
                        .WithMany()
                        .HasForeignKey("RecieveUserId");

                    b.HasOne("SilverCart.Domain.Entities.UserPromotion", "UserPromotion")
                        .WithMany()
                        .HasForeignKey("UserPromotionId");

                    b.Navigation("ConfirmUser");

                    b.Navigation("CustomerUser");

                    b.Navigation("DependentUser");

                    b.Navigation("Guardian");

                    b.Navigation("OrderedUser");

                    b.Navigation("RecieveUser");

                    b.Navigation("UserPromotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.OrderStatus", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderDetails", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Orders.OrderDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Payments.PaymentHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.CustomerPaymentMethod", null)
                        .WithMany("PaymentHistories")
                        .HasForeignKey("CustomerPaymentMethodId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "CustomerUser")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Payments.PaymentHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SilverCart.Domain.Entities.Payments.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SilverCart.Domain.Entities.Auth.Wallet", "Wallet")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CustomerUser");

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Promotion");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Payments.PaymentMethod", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Payments.PaymentMethod", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.ProductImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReview", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.ProductReview", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Consultation", null)
                        .WithMany("RecommendationProducts")
                        .HasForeignKey("ConsultationId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Products.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Stores.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.ProductItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Products.ProductItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Promotion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.AdministratorUser", null)
                        .WithMany("Reports")
                        .HasForeignKey("AdministratorUserId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Report", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.SavedAddress", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("BaseUserId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.SavedAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stocks.Stock", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Stocks.Stock", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithOne("Stock")
                        .HasForeignKey("SilverCart.Domain.Entities.Stocks.Stock", "ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stocks.StockHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Stocks.StockHistory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithMany("StockHistories")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.Store", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.AdministratorUser", null)
                        .WithMany("Stores")
                        .HasForeignKey("AdministratorUserId");

                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Stores.Store", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Stores.StoreAddress", "StoreAddress")
                        .WithOne("Store")
                        .HasForeignKey("SilverCart.Domain.Entities.Stores.Store", "StoreAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAddress");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreAddress", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Stores.StoreAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.UserPromotion", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.AdministratorUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.AdministratorUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.AdministratorRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.ConsultantUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.ConsultantRole", "Role")
                        .WithMany("Consultants")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerRole", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRoleId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", "Guardian")
                        .WithMany("Dependents")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.DependentUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.GuardianUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.StoreUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Stores.Store", "Store")
                        .WithMany("StoreUsers")
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReport", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Report", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.ProductReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Products.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserReport", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Report", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.UserReport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantRole", b =>
                {
                    b.Navigation("Consultants");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ConversationMemberships");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreRole", b =>
                {
                    b.Navigation("StoreUserRoles");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.Wallet", b =>
                {
                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Categories.Category", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Consultation", b =>
                {
                    b.Navigation("RecommendationProducts");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("PaymentStatus")
                        .IsRequired();

                    b.Navigation("ShippingStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Payments.PaymentMethod", b =>
                {
                    b.Navigation("CustomerPaymentMethods");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductItems");

                    b.Navigation("ProductPromotions");

                    b.Navigation("ProductReviews");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Products.ProductItem", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("Stock");

                    b.Navigation("StockHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.SavedAddress", b =>
                {
                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.Store", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("StoreUsers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Stores.StoreAddress", b =>
                {
                    b.Navigation("Store")
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.AdministratorUser", b =>
                {
                    b.Navigation("Reports");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerPaymentMethods");

                    b.Navigation("Orders");

                    b.Navigation("PaymentHistories");

                    b.Navigation("Rank")
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.Navigation("Dependents");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.Navigation("StoreUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
