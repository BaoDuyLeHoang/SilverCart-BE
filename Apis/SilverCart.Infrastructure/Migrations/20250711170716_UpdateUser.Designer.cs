// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711170716_UpdateUser")]
    partial class UpdateUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Commons.Entities.BaseRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("ConsultantRoles", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(96);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(95);

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(98);

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Other");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("OTPId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("OTPId");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OTPData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VerificationToId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OTPData");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("StoreUserRoles", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("AdministratorRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c2cb3f3-d9b1-4d5f-8a9c-1e6f689ee0f4"),
                            Description = "",
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("0e61cc83-d3c4-43b1-9334-8dd0c9d22833"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("CustomerRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c09b112-baf9-4ec3-bc79-cce452219d60"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        },
                        new
                        {
                            Id = new Guid("2c8499d3-6ec2-4745-b2f7-6e33182f6f6f"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("c66a403b-e1f9-47f3-9f6b-d8c3913b7a1b"),
                            Description = "",
                            IsDeleted = false,
                            Name = "DependentUser",
                            NormalizedName = "DEPENDENTUSER"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("StoreRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("60cb3e42-0903-4c3f-8e9c-bfdc6f6a1a01"),
                            Description = "",
                            IsDeleted = false,
                            Name = "StoreOwner",
                            NormalizedName = "STOREOWNER"
                        },
                        new
                        {
                            Id = new Guid("a2a02247-2a41-4a38-8804-4be8038fa78b"),
                            Description = "",
                            IsDeleted = false,
                            Name = "StoreSupport",
                            NormalizedName = "STORESUPPORT"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Address", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DependentUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GuardianUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToDistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.HasIndex("ConsultantUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DependentUserId");

                    b.HasIndex("GuardianUserId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CartItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApprovedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1107),
                            IsDeleted = false,
                            Description = "Các thiết bị y tế hỗ trợ chăm sóc sức khỏe người cao tuổi",
                            Name = "Thiết bị y tế",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1113),
                            IsDeleted = false,
                            Description = "Thực phẩm bổ sung dinh dưỡng cho người cao tuổi",
                            Name = "Thực phẩm dinh dưỡng",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1115),
                            IsDeleted = false,
                            Description = "Các dụng cụ hỗ trợ sinh hoạt hàng ngày",
                            Name = "Dụng cụ hỗ trợ",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1118),
                            IsDeleted = false,
                            Description = "Các dịch vụ tư vấn chăm sóc sức khỏe",
                            Name = "Dịch vụ tư vấn",
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111112"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1121),
                            IsDeleted = false,
                            Description = "Các loại máy đo huyết áp điện tử",
                            Name = "Máy đo huyết áp",
                            ParentCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111113"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1124),
                            IsDeleted = false,
                            Description = "Thiết bị đo đường huyết tại nhà",
                            Name = "Máy đo đường huyết",
                            ParentCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111114"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1134),
                            IsDeleted = false,
                            Description = "Thiết bị xông mũi họng tại nhà",
                            Name = "Máy xông mũi họng",
                            ParentCategoryId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222223"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1137),
                            IsDeleted = false,
                            Description = "Các loại sữa bổ sung dinh dưỡng",
                            Name = "Sữa dinh dưỡng",
                            ParentCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222224"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1139),
                            IsDeleted = false,
                            Description = "Thực phẩm chức năng bổ sung vitamin",
                            Name = "Vitamin và khoáng chất",
                            ParentCategoryId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333334"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1142),
                            IsDeleted = false,
                            Description = "Các loại gậy hỗ trợ đi lại",
                            Name = "Gậy chống",
                            ParentCategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Active"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333335"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1144),
                            IsDeleted = false,
                            Description = "Xe lăn hỗ trợ di chuyển",
                            Name = "Xe lăn",
                            ParentCategoryId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("LastMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("User1Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("User2Id")
                        .HasColumnType("uuid");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Message", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Consultation", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("CompletedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("ReportContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VideoRecordingUrl")
                        .HasColumnType("text");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Consultations", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CustomerPaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerRanks", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("CustomerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DependentUserID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GuardianId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderGhnCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UserPromotionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserRank")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("DependentUserID");

                    b.HasIndex("GuardianId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserPromotionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderReview", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderReviews", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderDetails", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrderItemStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentMethodHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Product", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoPath")
                        .HasColumnType("text");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111121"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2735),
                            IsDeleted = false,
                            Description = "Máy đo huyết áp điện tử tự động, dễ sử dụng cho người cao tuổi",
                            Name = "Máy đo huyết áp Omron HEM-7130",
                            ProductType = "Physical",
                            VideoPath = "/videos/products/omron-hem-7130.mp4"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111122"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2742),
                            IsDeleted = false,
                            Description = "Máy đo đường huyết chính xác, ít đau khi lấy máu",
                            Name = "Máy đo đường huyết Accu-Chek Guide",
                            ProductType = "Physical",
                            VideoPath = "/videos/products/accu-chek-guide.mp4"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111123"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2746),
                            IsDeleted = false,
                            Description = "Máy xông mũi họng siêu âm, hiệu quả cao",
                            Name = "Máy xông mũi họng Omron NE-C28",
                            ProductType = "Physical",
                            VideoPath = "/videos/products/omron-ne-c28.mp4"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222225"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2749),
                            IsDeleted = false,
                            Description = "Sữa dinh dưỡng bổ sung protein và vitamin cho người cao tuổi",
                            Name = "Sữa Ensure Gold",
                            ProductType = "Consumable",
                            VideoPath = "/videos/products/ensure-gold.mp4"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222226"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2751),
                            IsDeleted = false,
                            Description = "Bổ sung vitamin D3 và K2 cho xương khớp",
                            Name = "Vitamin D3 + K2",
                            ProductType = "Consumable",
                            VideoPath = "/videos/products/vitamin-d3-k2.mp4"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333336"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2754),
                            IsDeleted = false,
                            Description = "Gậy chống 4 chân chống trượt, an toàn cho người cao tuổi",
                            Name = "Gậy chống 4 chân",
                            ProductType = "Physical",
                            VideoPath = "/videos/products/gay-chong-4-chan.mp4"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333337"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2756),
                            IsDeleted = false,
                            Description = "Xe lăn tay gấp gọn, nhẹ và dễ di chuyển",
                            Name = "Xe lăn tay gấp gọn",
                            ProductType = "Physical",
                            VideoPath = "/videos/products/xe-lan-tay.mp4"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444445"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2758),
                            IsDeleted = false,
                            Description = "Dịch vụ tư vấn dinh dưỡng trực tuyến với chuyên gia",
                            Name = "Tư vấn dinh dưỡng online",
                            ProductType = "Service",
                            VideoPath = "/videos/services/tu-van-dinh-duong.mp4"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444446"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2772),
                            IsDeleted = false,
                            Description = "Gói khám sức khỏe định kỳ cho người cao tuổi",
                            Name = "Khám sức khỏe định kỳ",
                            ProductType = "Service",
                            VideoPath = "/videos/services/kham-suc-khoe.mp4"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductCategory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111161"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3968),
                            IsDeleted = false,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111112"),
                            ProductId = new Guid("11111111-1111-1111-1111-111111111121")
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111162"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3974),
                            IsDeleted = false,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111113"),
                            ProductId = new Guid("11111111-1111-1111-1111-111111111122")
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111163"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3977),
                            IsDeleted = false,
                            CategoryId = new Guid("11111111-1111-1111-1111-111111111114"),
                            ProductId = new Guid("11111111-1111-1111-1111-111111111123")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222233"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3979),
                            IsDeleted = false,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222223"),
                            ProductId = new Guid("22222222-2222-2222-2222-222222222225")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222234"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3981),
                            IsDeleted = false,
                            CategoryId = new Guid("22222222-2222-2222-2222-222222222224"),
                            ProductId = new Guid("22222222-2222-2222-2222-222222222226")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333345"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3984),
                            IsDeleted = false,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333334"),
                            ProductId = new Guid("33333333-3333-3333-3333-333333333336")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333346"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(4033),
                            IsDeleted = false,
                            CategoryId = new Guid("33333333-3333-3333-3333-333333333335"),
                            ProductId = new Guid("33333333-3333-3333-3333-333333333337")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444449"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(4036),
                            IsDeleted = false,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ProductId = new Guid("44444444-4444-4444-4444-444444444445")
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444450"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(4038),
                            IsDeleted = false,
                            CategoryId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ProductId = new Guid("44444444-4444-4444-4444-444444444446")
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductImages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111151"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3212),
                            IsDeleted = false,
                            ImageName = "Máy đo huyết áp Omron HEM-7130 - Ảnh 1",
                            ImagePath = "/images/products/omron-hem-7130-white-1.jpg",
                            ProductItemId = new Guid("11111111-1111-1111-1111-111111111141")
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111152"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3214),
                            IsDeleted = false,
                            ImageName = "Máy đo huyết áp Omron HEM-7130 - Ảnh 2",
                            ImagePath = "/images/products/omron-hem-7130-white-2.jpg",
                            ProductItemId = new Guid("11111111-1111-1111-1111-111111111141")
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222232"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3217),
                            IsDeleted = false,
                            ImageName = "Sữa Ensure Gold 400g - Ảnh 1",
                            ImagePath = "/images/products/ensure-gold-400g-1.jpg",
                            ProductItemId = new Guid("22222222-2222-2222-2222-222222222230")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333343"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3219),
                            IsDeleted = false,
                            ImageName = "Gậy chống 4 chân đen - Ảnh 1",
                            ImagePath = "/images/products/gay-chong-4-chan-black-1.jpg",
                            ProductItemId = new Guid("33333333-3333-3333-3333-333333333341")
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333344"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3221),
                            IsDeleted = false,
                            ImageName = "Xe lăn tay xanh - Ảnh 1",
                            ImagePath = "/images/products/xe-lan-tay-xanh-1.jpg",
                            ProductItemId = new Guid("33333333-3333-3333-3333-333333333342")
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Length")
                        .HasColumnType("integer");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasIndex("StoreId");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111141"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3063),
                            IsDeleted = false,
                            DiscountedPrice = 800000m,
                            Height = 10,
                            IsActive = true,
                            Length = 20,
                            OriginalPrice = 850000m,
                            SKU = "OMRON-HEM-7130-WHITE-DL",
                            Stock = 25,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111131"),
                            Weight = 500,
                            Width = 15
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111142"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3068),
                            IsDeleted = false,
                            DiscountedPrice = 1100000m,
                            Height = 5,
                            IsActive = true,
                            Length = 15,
                            OriginalPrice = 1200000m,
                            SKU = "ACCU-CHEK-GUIDE-BASIC-DL",
                            Stock = 15,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("11111111-1111-1111-1111-111111111133"),
                            Weight = 300,
                            Width = 10
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222230"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3072),
                            IsDeleted = false,
                            DiscountedPrice = 250000m,
                            Height = 6,
                            IsActive = true,
                            Length = 12,
                            OriginalPrice = 280000m,
                            SKU = "ENSURE-GOLD-400G-DL",
                            Stock = 50,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("22222222-2222-2222-2222-222222222227"),
                            Weight = 400,
                            Width = 8
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222231"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3076),
                            IsDeleted = false,
                            DiscountedPrice = 160000m,
                            Height = 3,
                            IsActive = true,
                            Length = 8,
                            OriginalPrice = 180000m,
                            SKU = "VITAMIN-D3-K2-60-DL",
                            Stock = 75,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("22222222-2222-2222-2222-222222222229"),
                            Weight = 100,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333341"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3081),
                            IsDeleted = false,
                            DiscountedPrice = 420000m,
                            Height = 5,
                            IsActive = true,
                            Length = 120,
                            OriginalPrice = 450000m,
                            SKU = "GAY-CHONG-4-CHAN-BLACK-DL",
                            Stock = 20,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("33333333-3333-3333-3333-333333333338"),
                            Weight = 800,
                            Width = 5
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333342"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(3085),
                            IsDeleted = false,
                            DiscountedPrice = 2600000m,
                            Height = 90,
                            IsActive = true,
                            Length = 100,
                            OriginalPrice = 2800000m,
                            SKU = "XE-LAN-TAY-XANH-DL",
                            Stock = 8,
                            StoreId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            VariantId = new Guid("33333333-3333-3333-3333-333333333340"),
                            Weight = 15000,
                            Width = 60
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111131"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2871),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 850000m,
                            ProductId = new Guid("11111111-1111-1111-1111-111111111121"),
                            Stock = 50,
                            VariantName = "Máy đo huyết áp Omron HEM-7130 - Màu trắng"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111132"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2875),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 850000m,
                            ProductId = new Guid("11111111-1111-1111-1111-111111111121"),
                            Stock = 30,
                            VariantName = "Máy đo huyết áp Omron HEM-7130 - Màu xanh"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111133"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2878),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 1200000m,
                            ProductId = new Guid("11111111-1111-1111-1111-111111111122"),
                            Stock = 25,
                            VariantName = "Máy đo đường huyết Accu-Chek Guide - Bộ cơ bản"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111134"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2880),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 1500000m,
                            ProductId = new Guid("11111111-1111-1111-1111-111111111122"),
                            Stock = 20,
                            VariantName = "Máy đo đường huyết Accu-Chek Guide - Bộ đầy đủ"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222227"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2883),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 280000m,
                            ProductId = new Guid("22222222-2222-2222-2222-222222222225"),
                            Stock = 100,
                            VariantName = "Sữa Ensure Gold - Hộp 400g"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222228"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2885),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 520000m,
                            ProductId = new Guid("22222222-2222-2222-2222-222222222225"),
                            Stock = 80,
                            VariantName = "Sữa Ensure Gold - Hộp 850g"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222229"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2889),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 180000m,
                            ProductId = new Guid("22222222-2222-2222-2222-222222222226"),
                            Stock = 150,
                            VariantName = "Vitamin D3+K2 - Lọ 60 viên"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333338"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2900),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 450000m,
                            ProductId = new Guid("33333333-3333-3333-3333-333333333336"),
                            Stock = 40,
                            VariantName = "Gậy chống 4 chân - Màu đen"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333339"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2907),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 450000m,
                            ProductId = new Guid("33333333-3333-3333-3333-333333333336"),
                            Stock = 35,
                            VariantName = "Gậy chống 4 chân - Màu xanh"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333340"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2909),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 2800000m,
                            ProductId = new Guid("33333333-3333-3333-3333-333333333337"),
                            Stock = 15,
                            VariantName = "Xe lăn tay gấp gọn - Màu xanh"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444447"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2912),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 500000m,
                            ProductId = new Guid("44444444-4444-4444-4444-444444444445"),
                            Stock = 999,
                            VariantName = "Tư vấn dinh dưỡng - 1 buổi"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444448"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2915),
                            IsDeleted = false,
                            IsActive = true,
                            Price = 2000000m,
                            ProductId = new Guid("44444444-4444-4444-4444-444444444445"),
                            Stock = 999,
                            VariantName = "Tư vấn dinh dưỡng - Gói 5 buổi"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ScheduledTask", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskPath")
                        .HasColumnType("text");

                    b.HasIndex("StoreUserId");

                    b.ToTable("ScheduledTasks", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StockHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StockAfterChange")
                        .HasColumnType("integer");

                    b.HasIndex("ProductItemId");

                    b.ToTable("StockHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GhnShopId")
                        .HasColumnType("integer");

                    b.Property<string>("Infomation")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGhnSynced")
                        .HasColumnType("boolean");

                    b.Property<int>("IsVerified")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreAddressId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreAddressId");

                    b.ToTable("Stores", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaab"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(1527),
                            IsDeleted = false,
                            AvatarPath = "/images/stores/doc-lap.jpg",
                            Infomation = "Cửa hàng độc lập chuyên cung cấp thiết bị y tế và thuốc cho người cao tuổi",
                            IsActive = true,
                            IsBanned = false,
                            IsGhnSynced = false,
                            IsVerified = 1,
                            Name = "Nhà thuốc Độc Lập",
                            Phone = "028-1234-5678",
                            StoreAddressId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("StoreAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 15, 989, DateTimeKind.Utc).AddTicks(2622),
                            IsDeleted = false,
                            Address = "123 Đường Lê Lợi",
                            DistrictId = 7601,
                            DistrictName = "Quận 1",
                            ProvinceName = "TP. Hồ Chí Minh",
                            WardCode = "7601001",
                            WardName = "Bến Nghé"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.ToTable("AdministratorUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9878ee32-2ead-4165-9e44-e510ba1bae29"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a11c200-bcb4-49a2-86f6-2872a12bd3ac",
                            CreationDate = new DateTime(2025, 7, 11, 17, 7, 16, 33, DateTimeKind.Utc).AddTicks(166),
                            Email = "admin@elderly.com",
                            EmailConfirmed = true,
                            FullName = "Super Admin",
                            Gender = "Other",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ELDERLY.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELnpiK3mQBKNyxLpFXvZaSaPJNw8Ka2byPrhxXDnVavWg7HSQchY+VDE/+6SEqCFcQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExpertiseArea")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StringeeAccessToken")
                        .HasColumnType("text");

                    b.HasIndex("RoleId");

                    b.ToTable("ConsultantUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("CustomerRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid>("GuardianId")
                        .HasColumnType("uuid");

                    b.HasIndex("GuardianId");

                    b.ToTable("DependentUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.ToTable("GuardianUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.ToTable("StoreUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.ToTable("ProductReports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.ToTable("UserReports", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.OTPData", "OTP")
                        .WithMany()
                        .HasForeignKey("OTPId");

                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany("StoreUsers")
                        .HasForeignKey("StoreId");

                    b.Navigation("OTP");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUserRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreRole", "Role")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.AdministratorRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.StoreRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Address", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("AdministratorUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.ConsultantUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ConsultantUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.DependentUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("DependentUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("GuardianUserId");

                    b.HasOne("SilverCart.Domain.Entities.StoreUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("StoreUserId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId");

                    b.HasOne("SilverCart.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ApprovedUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "User1")
                        .WithMany("ConversationsAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "User2")
                        .WithMany("ConversationsAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Message", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Chat.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Consultation", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.ConsultantUser", "ConsultantUser")
                        .WithMany("Consultations")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.DependentUser", "DependentUser")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultantUser");

                    b.Navigation("DependentUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithOne("Rank")
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerRank", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "CustomerUser")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.DependentUser", "DependentUser")
                        .WithMany()
                        .HasForeignKey("DependentUserID");

                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", "Guardian")
                        .WithMany()
                        .HasForeignKey("GuardianId");

                    b.HasOne("SilverCart.Domain.Entities.OrderStatus", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("SilverCart.Domain.Entities.UserPromotion", "UserPromotion")
                        .WithMany()
                        .HasForeignKey("UserPromotionId");

                    b.Navigation("CustomerUser");

                    b.Navigation("DependentUser");

                    b.Navigation("Guardian");

                    b.Navigation("UserPromotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderReview", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Orders.OrderDetails", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentMethodHistories")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Product", null)
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductItemId");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("Items")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", null)
                        .WithMany("Reports")
                        .HasForeignKey("AdministratorUserId");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ScheduledTask", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StockHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("StockHistories")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreAddress", "StoreAddress")
                        .WithMany()
                        .HasForeignKey("StoreAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAddress");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.AdministratorUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.AdministratorRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.ConsultantUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.ConsultantRole", "Role")
                        .WithMany("Consultants")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerRole", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRoleId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.GuardianUser", "Guardian")
                        .WithMany("Dependents")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.DependentUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.GuardianUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.StoreUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantRole", b =>
                {
                    b.Navigation("Consultants");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Navigation("ConversationsAsUser1");

                    b.Navigation("ConversationsAsUser2");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.Navigation("StoreUserRoles");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Chat.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PaymentMethodHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPromotions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("StockHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.Navigation("StoreUsers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.ConsultantUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Rank")
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.DependentUser", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.GuardianUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Dependents");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("ScheduledTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
