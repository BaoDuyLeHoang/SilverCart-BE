// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520085109_UpdateUser-fix")]
    partial class UpdateUserfix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Commons.Entities.BaseRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(96);

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(95);

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(100);

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(99);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid")
                        .HasColumnOrder(98);

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(97);

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DeleteById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModificationById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StoreUserId");

                    b.ToTable("StoreUserRoles", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("AdministratorRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b163c6fb-6b3b-4ce7-8f3e-99995a499a2f"),
                            Description = "",
                            IsDeleted = false,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("3daaf432-fb3a-4b1d-8e15-d7d7a9726f81"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("3178dd96-39af-4868-8096-52d245c60955"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = new Guid("2c6db6ae-6bc0-40d9-a94f-3892891ad743"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = new Guid("543fdcdd-995d-4289-8c5c-8667d71c12c0"),
                            Description = "",
                            IsDeleted = false,
                            Name = "CustomerSupport",
                            NormalizedName = "CUSTOMERSUPPORT"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("CustomerRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("959c60b8-7ae2-4d88-8424-be9803d2f303"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Guardian",
                            NormalizedName = "GUARDIAN"
                        },
                        new
                        {
                            Id = new Guid("c3e3c11d-48ac-42a3-8049-b0c638fc07b7"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = new Guid("d01674e2-8fa5-4617-9a97-c79f82d8a501"),
                            Description = "",
                            IsDeleted = false,
                            Name = "DependentUser",
                            NormalizedName = "DEPENDENTUSER"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Commons.Entities.BaseRole");

                    b.ToTable("StoreRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33ba3181-ce48-4b9b-b112-741320cdb8ef"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Service",
                            NormalizedName = "SERVICE"
                        },
                        new
                        {
                            Id = new Guid("af94e231-ddc9-4678-8dae-5f30a54725a4"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("1aae0341-c8bd-474f-afb2-d6bcf3daa331"),
                            Description = "",
                            IsDeleted = false,
                            Name = "StoreStaff",
                            NormalizedName = "STORESTAFF"
                        },
                        new
                        {
                            Id = new Guid("302c5dee-c581-46d6-a6dd-198599fea694"),
                            Description = "",
                            IsDeleted = false,
                            Name = "Shipper",
                            NormalizedName = "SHIPPER"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Address", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToDistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreUserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CartItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("CartItem", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApprovedUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasIndex("ApprovedUserId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddresses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CustomerPaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerRanks", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("ArrivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EstimatedArrivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserPromotionId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserRank")
                        .HasColumnType("integer");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserPromotionId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("OrderId");

                    b.HasIndex("StoreProductItemId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderReview", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderReviews", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("OrderStatuses", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.ToTable("PaymentMethods", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uuid");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PaymentMethodHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Product", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProductType")
                        .HasColumnType("integer");

                    b.Property<string>("VideoPath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductCategory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductItemId");

                    b.ToTable("ProductImages", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<decimal>("DiscountedPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("OriginalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uuid");

                    b.HasIndex("VariantId");

                    b.ToTable("ProductItems", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromotionId");

                    b.ToTable("ProductPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariants", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MaximumQuantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("MinimumQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Promotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid?>("AdministratorUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("AdministratorUserId");

                    b.ToTable("Reports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ScheduledTask", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("TaskPath")
                        .HasColumnType("text");

                    b.HasIndex("StoreUserId");

                    b.ToTable("ScheduledTasks", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StockHistory", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuantityChange")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int>("StockAfterChange")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreProductItemId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreProductItemId");

                    b.ToTable("StockHistories", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AvatarPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("GhnShopId")
                        .HasColumnType("integer");

                    b.Property<string>("Infomation")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGhnSynced")
                        .HasColumnType("boolean");

                    b.Property<int>("IsVerified")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoreAddressId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreAddressId");

                    b.ToTable("Stores", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreAddress", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<string>("FromDistrictName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FromProvinceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WardCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("StoreAddress");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreProductItem", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("ProductItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProductItemId");

                    b.HasIndex("StoreId");

                    b.ToTable("StoreProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<int>("RoleInStore")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("StoreUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseEntity");

                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("PromotionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPromotions", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uuid");

                    b.HasIndex("RoleId");

                    b.ToTable("AdministratorUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9878ee32-2ead-4165-9e44-e510ba1bae29"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4947d753-995c-440e-8f7d-5675bcdb2260",
                            CreationDate = new DateTime(2025, 5, 20, 8, 51, 8, 500, DateTimeKind.Utc).AddTicks(9075),
                            Email = "admin@elderly.com",
                            EmailConfirmed = true,
                            FullName = "Super Admin",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ELDERLY.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEA433vEsdyjnQ+15DZRXMN0fDrkkt+CAO7SAcnVg47ahA+GP/qeBpD05Z+D0c0yYNQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        });
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.BaseUser");

                    b.Property<Guid?>("CustomerRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uuid");

                    b.HasIndex("CustomerRoleId");

                    b.ToTable("CustomerUsers", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.ToTable("ProductReports", (string)null);
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserReport", b =>
                {
                    b.HasBaseType("SilverCart.Domain.Entities.Report");

                    b.ToTable("UserReports", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUserRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreRole", "Role")
                        .WithMany("StoreUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.AdministratorRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.HasOne("SilverCart.Domain.Commons.Entities.BaseRole", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.StoreRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Address", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", null)
                        .WithMany("Addresses")
                        .HasForeignKey("AdministratorUserId");

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany()
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", "ApprovedUser")
                        .WithMany()
                        .HasForeignKey("ApprovedUserId");

                    b.HasOne("SilverCart.Domain.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ApprovedUser");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerAddress", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerPaymentMethod", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.CustomerRank", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithOne("Rank")
                        .HasForeignKey("SilverCart.Domain.Entities.CustomerRank", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.OrderStatus", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("SilverCart.Domain.Entities.UserPromotion", "UserPromotion")
                        .WithMany()
                        .HasForeignKey("UserPromotionId");

                    b.Navigation("Customer");

                    b.Navigation("UserPromotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.StoreProductItem", "StoreProductItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("StoreProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("StoreProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderReview", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethodHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("PaymentMethodHistories")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductImage", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductItemId");

                    b.Navigation("ProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.ProductVariant", "Variant")
                        .WithMany("Items")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Report", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.AdministratorUser", null)
                        .WithMany("Reports")
                        .HasForeignKey("AdministratorUserId");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ScheduledTask", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreUser", "StoreUser")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("StoreUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreUser");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StockHistory", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreProductItem", "StoreProductItem")
                        .WithMany("StockHistories")
                        .HasForeignKey("StoreProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreProductItem");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.StoreAddress", "StoreAddress")
                        .WithMany()
                        .HasForeignKey("StoreAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreAddress");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreProductItem", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.ProductItem", "ProductItem")
                        .WithMany("StoreProductItems")
                        .HasForeignKey("ProductItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany("StoreProductItems")
                        .HasForeignKey("StoreId");

                    b.Navigation("ProductItem");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Store", "Store")
                        .WithMany("StoreUsers")
                        .HasForeignKey("StoreId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", "User")
                        .WithMany("StoreUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.UserPromotion", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promotion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.AdministratorUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SilverCart.Domain.Entities.AdministratorRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.OwnsOne("SilverCart.Domain.Entities.OTPData", "OTP", b1 =>
                        {
                            b1.Property<Guid>("AdministratorUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean");

                            b1.HasKey("AdministratorUserId");

                            b1.ToTable("AdministratorUsers");

                            b1.WithOwner()
                                .HasForeignKey("AdministratorUserId");
                        });

                    b.Navigation("OTP");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.HasOne("SilverCart.Domain.Entities.Auth.CustomerRole", null)
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRoleId");

                    b.HasOne("SilverCart.Domain.Entities.BaseUser", null)
                        .WithOne()
                        .HasForeignKey("SilverCart.Domain.Entities.Auth.CustomerUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SilverCart.Domain.Entities.OTPData", "OTP", b1 =>
                        {
                            b1.Property<Guid>("CustomerUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("ExpirationTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("IsUsed")
                                .HasColumnType("boolean");

                            b1.HasKey("CustomerUserId");

                            b1.ToTable("CustomerUsers");

                            b1.WithOwner()
                                .HasForeignKey("CustomerUserId");
                        });

                    b.Navigation("OTP");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.BaseUser", b =>
                {
                    b.Navigation("StoreUsers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerRole", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreRole", b =>
                {
                    b.Navigation("StoreUserRoles");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Category", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("PaymentMethodHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Product", b =>
                {
                    b.Navigation("ProductCategories");

                    b.Navigation("ProductPromotions");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductItem", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("StoreProductItems");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Promotion", b =>
                {
                    b.Navigation("ProductPromotions");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Store", b =>
                {
                    b.Navigation("StoreProductItems");

                    b.Navigation("StoreUsers");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreProductItem", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("StockHistories");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.StoreUser", b =>
                {
                    b.Navigation("ScheduledTasks");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.AdministratorUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("SilverCart.Domain.Entities.Auth.CustomerUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");

                    b.Navigation("Rank")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
